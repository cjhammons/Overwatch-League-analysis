}
}
debugSource('C:/programming/owl-analysis/elo.R')
elo_table <- init_elo_table()
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table)
}
}
elo_table <- init_elo_table()
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table)
}
}
View(elo_table)
elo_table <- init_elo_table()
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table)
}
}
View(elo_table)
debugSource('C:/programming/owl-analysis/elo.R')
elo_table <- init_elo_table()
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table)
}
}
elo_table <- init_elo_table()
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table)
}
}
source('C:/programming/owl-analysis/elo.R')
View(elo_table)
View(elo_table)
source('C:/programming/owl-analysis/elo.R')
source('C:/programming/owl-analysis/elo.R')
source('C:/programming/owl-analysis/elo.R')
source('C:/programming/owl-analysis/elo/elo_util.R')
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
library("jsonlite")
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
library("jsonlite")
import_matches()
source('C:/programming/owl-analysis/import.R')
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
source('C:/programming/owl-analysis/elo/elo_util.R')
import_matches()
source('C:/programming/owl-analysis/elo/elo_util.R')
source('C:/programming/owl-analysis/import.R')
elo_table <- init_elo_table(teams_df)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table)
}
}
View(elo_table)
source('C:/programming/owl-analysis/elo/elo_util.R')
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table)
}
}
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table)
}
}
View(elo_table)
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
source('C:/programming/owl-analysis/elo/elo_util.R')
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
View(matches_df)
source('C:/programming/owl-analysis/elo/elo_util.R')
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
source('C:/programming/owl-analysis/elo/elo_util.R')
install.packages("rmarkdown")
getOptions("repos")
getOption("repos")
options(repos = c(CRAN = "https://cran.rstudio.com"))
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
install.packages("yaml")
install.packages("yaml")
library(devtools)
install_github('viking/r-yaml')
install.packages("install_github")
library("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
teams_df = import_teams()
source('C:/programming/owl-analysis/import.R')
source('C:/programming/owl-analysis/import.R')
install.packages("httr", "jsonlite")
install.packages("httr")
install.packages("jsonlite")
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
source('C:/programming/owl-analysis/elo/elo_util.R')
source('C:/programming/owl-analysis/import.R')
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games(matches_df = matches_df)
elo_table <- init_elo_table(teams_df, 2500)
source('C:/programming/owl-analysis/elo/elo_util.R')
install.packages(sqldf)
install.packages("sqldf")
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games(matches_df = matches_df)
elo_table <- init_elo_table(teams_df, 2500)
source('C:/programming/owl-analysis/elo/elo_util.R')
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games(matches_df = matches_df)
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
source('C:/programming/owl-analysis/import.R')
source('C:/programming/owl-analysis/elo/elo_util.R')
View(elo_table)
dFuel_history <- vector(1000)
asdf <- vector(1000)
asdf <- c(1000)
asdf <- c(asdf, 2000, 3000)
asdf <- vector(mode="list")
asdf[343] <- c(1000)
View(asdf)
asdf[[456]] <- c(1000)
View(asdf)
asdf <- vector(mode="list")
asdf[[456]] <- c(1000)
elo_table <- init_elo_table(teams_df, 2500)
history <- data.frame()
for (row in nrow(elo_table)) {
newRow <- data.frame(elo_table[row,"id"]=2500)
history <- rbind(history, newRow)
}
elo_table <- init_elo_table(teams_df, 2500)
history <- data.frame()
for (row in nrow(elo_table)) {
newRow <- data.frame(elo_table[row,"id"]=2500)
history <- rbind(history, newRow)
}
elo_table <- init_elo_table(teams_df, 2500)
history <- data.frame()
for (row in nrow(elo_table)) {
newRow <- data.frame(placeholder_name=2500)
names(newRow)[names(newRow) == "placeholder_name"] <- elo_table[row,'id']
history <- rbind(history, newRow)
}
View(history)
elo_table <- init_elo_table(teams_df, 2500)
history <- data.frame()
for (row in nrow(elo_table)) {
newRow <- data.frame(placeholder_name=2500)
names(newRow)[names(newRow) == "placeholder_name"] <- elo_table[row,'id']
history <- rbind(history, newRow)
}
elo_table <- init_elo_table(teams_df, 2500)
history <- data.frame()
for (row in nrow(elo_table)) {
newRow <- data.frame(placeholder_name=2500)
names(newRow)[names(newRow) == "placeholder_name"] <- elo_table[row,'id']
history <- rbind(history, newRow)
}
browser()
elo_table <- init_elo_table(teams_df, 2500)
history <- data.frame()
for (row in nrow(elo_table)) {
newRow <- data.frame(placeholder_name=2500)
names(newRow)[names(newRow) == "placeholder_name"] <- elo_table[row,'id']
history <- rbind(history, newRow)
}
browser()
elo_table <- init_elo_table(teams_df, 2500)
history <- data.frame()
for (row in nrow(elo_table)) {
newRow <- data.frame(placeholder_name=2500)
names(newRow)[names(newRow) == "placeholder_name"] <- elo_table[row,'id']
history <- rbind(history, newRow)
}
source('C:/programming/owl-analysis/elo/elo_util.R')
debugSource('C:/programming/owl-analysis/elo/elo_algorithms.R')
browser()
elo_table <- init_elo_table(teams_df, 2500)
history <- data.frame()
for (row in nrow(elo_table)) {
newRow <- data.frame(placeholder_name=2500)
names(newRow)[names(newRow) == "placeholder_name"] <- elo_table[row,'id']
history <- rbind(history, newRow)
}
View(history)
browser()
elo_table <- init_elo_table(teams_df, 2500)
history <- data.frame()
for (row in nrow(elo_table)) {
newRow <- data.frame(placeholder_name=2500)
names(newRow)[names(newRow) == "placeholder_name"] <- elo_table[row,'id']
history <- rbind(history, newRow)
}
source('C:/programming/owl-analysis/elo/elo_util.R')
git
install.packages("tidyverse")
source('C:/programming/owl-analysis/import.R')
players_df = import_players()
source('C:/programming/owl-analysis/import.R')
players_df = import_players()
tem <- import_teams()
unframe(tem)
enframe(tem)
source('C:/programming/owl-analysis/import.R')
tem <- import_teams()
as_tibble(elo_table)
source('C:/programming/owl-analysis/import.R')
import_teams()
View(teams_df)
import_players()
source('C:/programming/owl-analysis/import.R')
import_players()
View(players_df)
source('C:/programming/owl-analysis/import.R')
import_games()
View(games_df)
source('C:/programming/owl-analysis/import.R')
source('C:/programming/owl-analysis/elo/elo_util.R')
source('C:/programming/owl-analysis/import.R')
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games()
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
View(elo_table)
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
browser()
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
debugSource('C:/programming/owl-analysis/elo/elo_algorithms.R')
n
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
debugSource('C:/programming/owl-analysis/elo/elo_algorithms.R')
browser()
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
status <- matches_df[match,"status"]
View(status)
status <- matches_df[match,"status"]$status
debugSource('C:/programming/owl-analysis/elo/elo_algorithms.R')
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]$status
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
source('C:/programming/owl-analysis/elo/elo_algorithms.R')
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]$status
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]$status
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(winnerId)
asdf <- match[1,"competitors"][[1]]$id
asdf <- match[1,"competitors"][[1]]
View(asdf)
match[1,"competitors"][[1]]
match[1,"competitors"][[1]]$id
asdf <- match[1,"competitors"][[1]]
View(asdf)
asdf <- match[1,"competitors"][[1]][[1]]
View(asdf)
asdf <- match[1,"competitors"][[1]][[1]]$id
match[1,"scores"][[1]][[1$value
]
]
match[1,"scores"][[1]][[1]]
match[1,"scores"][[1]][[1]]$value
match[1,"scores"][[1]][[1]]$value
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]$status
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games(matches_df)
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
browser()
debugSource('C:/programming/owl-analysis/elo/elo_util.R')
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
quit()
browser()
exit()
q
undebug()
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games(matches_df)
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games(matches_df)
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
debugSource('C:/programming/owl-analysis/import.R')
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games(matches_df)
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(elo_table)
source('C:/programming/owl-analysis/import.R')
games_df = import_games(matches_df)
rm(tem)
rm(asdf)
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
source('C:/programming/owl-analysis/import.R')
source('C:/programming/owl-analysis/elo/elo_util.R')
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games(matches_df = matches_df)
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
View(history)
View(elo_table)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
source('C:/programming/owl-analysis/import.R')
source('C:/programming/owl-analysis/elo/elo_util.R')
teams_df = import_teams()
players_df = import_players()
matches_df = import_matches(chronological=TRUE)
games_df = import_games(matches_df = matches_df)
elo_table <- init_elo_table(teams_df, 2500)
for (match in 1:nrow(matches_df)) {
status <- matches_df[match,"status"]
if (identical(status, "CONCLUDED")) {
elo_table <- process_match(matches_df[match,], elo_table = elo_table, k=50)
}
}
source('C:/programming/owl-analysis/import.R')
View(elo_table)
